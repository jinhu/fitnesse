/* The following code was generated by JFlex 1.4.1 on 23/10/06 21:31 */

package com.lingo.abacus.intellij.plugin.fitnesse.language.lexing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.lingo.abacus.intellij.plugin.fitnesse.language.FitnesseTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 23/10/06 21:31 from the specification file
 * <tt>C:/Documents and Settings/florian/IdeaProjects/fitnesse_plugin/plugin/src/com/lingo/abacus/intellij/plugin/fitnesse/lexing/fitnesse.flex</tt>
 */
class GeneratedFitnesseLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DEFINE = 12;
  public static final int PAREN_DEFINE = 16;
  public static final int TABLE = 4;
  public static final int COLAPSABLE = 20;
  public static final int YYINITIAL = 0;
  public static final int PREFORMATTED = 18;
  public static final int COMMENT = 2;
  public static final int MARKUP = 10;
  public static final int CURRLY_DEFINE = 14;
  public static final int KEYWORD = 8;
  public static final int TABLE_RECORD = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\3\1\5\2\0\1\4\22\0\1\16\1\21\1\0\1\11"+
    "\3\0\1\7\1\55\1\57\1\17\2\0\1\10\1\47\1\51\1\2"+
    "\1\22\1\23\1\24\6\2\1\13\2\0\1\54\1\0\1\53\1\0"+
    "\21\15\1\43\10\15\1\0\1\6\1\0\1\14\1\12\1\0\1\35"+
    "\1\1\1\27\1\32\1\33\1\40\1\50\1\37\1\25\2\1\1\30"+
    "\1\44\1\26\1\41\1\34\1\1\1\46\1\42\1\36\1\31\2\1"+
    "\1\45\2\1\1\52\1\20\1\56\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\1\3\1\4\1\1\1\4\2\1"+
    "\1\5\2\1\1\2\2\1\1\2\2\1\1\6\1\7"+
    "\2\10\2\11\1\12\1\13\1\14\2\15\1\16\1\17"+
    "\1\20\1\21\2\22\1\23\1\12\1\24\1\25\1\24"+
    "\1\26\1\27\1\26\1\30\2\31\1\0\1\2\1\0"+
    "\1\3\2\4\1\0\1\12\1\32\1\33\1\34\2\0"+
    "\1\2\1\0\1\35\1\0\1\36\1\37\1\40\2\0"+
    "\1\41\6\0\1\2\2\0\1\42\1\43\1\31\1\44"+
    "\2\32\1\45\1\33\1\34\1\0\2\2\1\46\12\0"+
    "\1\2\1\34\1\47\1\50\1\0\2\45\1\32\1\33"+
    "\2\0\1\51\1\0\1\52\6\0\1\53\1\2\1\32"+
    "\3\0\2\51\10\0\1\45\1\33\1\51\1\0\1\52"+
    "\10\0\1\54\3\0\1\34\1\55\5\0\1\55\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u0240\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0240\0\u0540\0\u0570"+
    "\0\u05a0\0\u05a0\0\u05d0\0\u05a0\0\u05a0\0\u0600\0\u0630\0\u05a0"+
    "\0\u05a0\0\u0600\0\u0600\0\u0660\0\u0690\0\u05a0\0\u06c0\0\u05d0"+
    "\0\u05a0\0\u06f0\0\u0720\0\u0750\0\u05a0\0\u0780\0\u05a0\0\u07b0"+
    "\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930"+
    "\0\u0930\0\u0960\0\u0990\0\u05a0\0\u09c0\0\u09f0\0\u0a20\0\u0a50"+
    "\0\u05a0\0\u0a80\0\u05a0\0\u05a0\0\u05a0\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u05a0\0\u05a0\0\u0cf0\0\u05a0\0\u0d20\0\u0d50\0\u0d80"+
    "\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0a80\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\u1080\0\u0c90\0\u05a0\0\u07b0\0\u10b0\0\u10e0\0\u1110\0\u1140"+
    "\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0"+
    "\0\u12f0\0\u1320\0\u1350\0\u1380\0\u05a0\0\u13b0\0\u05a0\0\u1140"+
    "\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530"+
    "\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u05a0\0\u05a0\0\u1620\0\u1650"+
    "\0\u05a0\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\u05a0\0\u1800\0\u1830\0\u1860\0\u1800\0\u1890\0\u18c0"+
    "\0\u18f0\0\u1920\0\u1950\0\u1980\0\u05a0\0\u19b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\15\1\23"+
    "\1\24\1\25\1\16\1\26\1\27\1\30\1\20\1\31"+
    "\1\15\1\32\3\17\12\16\1\33\3\16\1\30\3\16"+
    "\1\34\1\16\1\15\1\35\6\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\15\1\23\1\24\1\25\1\16\1\26"+
    "\1\27\1\30\1\20\1\31\1\36\1\32\3\17\12\16"+
    "\1\33\3\16\1\30\3\16\1\34\1\16\1\15\1\35"+
    "\5\15\4\37\1\40\1\41\52\37\4\42\1\43\1\44"+
    "\12\42\1\45\37\42\4\46\1\47\1\50\12\46\1\51"+
    "\32\46\1\52\1\53\3\46\4\54\1\55\1\56\52\54"+
    "\4\57\1\60\1\44\10\57\2\61\40\57\4\62\1\60"+
    "\1\44\10\62\1\63\2\62\1\61\30\62\1\61\2\62"+
    "\1\61\2\62\4\64\1\60\1\44\13\64\1\61\34\64"+
    "\1\65\1\64\4\66\1\60\1\44\13\66\1\61\35\66"+
    "\1\67\4\70\1\60\1\44\10\70\2\61\36\70\1\71"+
    "\1\70\4\61\1\60\1\44\52\61\16\0\1\72\42\0"+
    "\2\73\7\0\1\73\1\74\1\0\1\73\1\72\3\0"+
    "\25\73\1\0\1\73\10\0\1\73\1\75\7\0\1\73"+
    "\1\74\1\0\1\73\1\72\3\0\3\75\22\73\1\0"+
    "\1\73\12\0\1\76\1\0\1\76\10\0\1\77\45\0"+
    "\1\100\1\101\10\0\1\72\44\0\1\76\1\100\1\22"+
    "\10\0\1\77\50\0\1\102\6\0\1\72\51\0\1\103"+
    "\5\0\1\72\2\0\1\104\44\0\1\73\7\0\1\72"+
    "\55\0\1\105\1\106\1\72\24\0\1\106\15\0\1\107"+
    "\1\73\7\0\1\73\1\74\1\0\1\73\1\72\3\0"+
    "\3\73\16\107\1\73\3\107\1\0\1\107\25\0\1\72"+
    "\1\110\1\0\1\111\46\0\1\104\5\0\1\72\1\112"+
    "\2\0\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\0\1\122\1\0\1\123\1\124\2\0\1\125\1\0"+
    "\1\126\16\0\2\73\7\0\1\73\1\74\1\0\1\73"+
    "\1\72\3\0\14\73\1\127\10\73\1\0\1\73\20\0"+
    "\1\130\4\0\1\72\57\0\1\72\33\0\1\131\5\0"+
    "\4\37\2\0\52\37\5\0\1\41\137\0\1\44\52\0"+
    "\4\46\2\0\12\46\1\0\37\46\5\0\1\50\52\0"+
    "\4\54\2\0\52\54\5\0\1\56\52\0\4\57\2\0"+
    "\10\57\2\0\40\57\4\62\2\0\10\62\1\0\2\62"+
    "\1\0\30\62\1\0\2\62\1\0\2\62\52\0\1\132"+
    "\2\0\1\133\2\0\4\64\2\0\13\64\1\0\34\64"+
    "\1\0\1\64\4\66\2\0\13\66\1\0\35\66\1\0"+
    "\4\70\2\0\10\70\2\0\44\70\2\0\10\70\2\0"+
    "\36\70\1\134\1\70\2\0\1\135\13\0\1\72\1\135"+
    "\2\0\3\135\34\0\2\73\7\0\1\73\1\74\1\0"+
    "\1\73\4\0\25\73\1\0\1\73\15\0\1\73\52\0"+
    "\1\73\1\75\7\0\1\73\1\74\1\0\1\73\4\0"+
    "\3\75\22\73\1\0\1\73\12\0\1\76\1\0\1\76"+
    "\10\0\1\76\43\0\1\135\1\76\1\0\1\76\10\0"+
    "\1\77\1\135\2\0\3\135\37\0\2\100\10\0\1\72"+
    "\41\0\4\136\2\0\1\137\1\140\50\136\6\0\1\141"+
    "\1\0\1\142\63\0\1\105\1\106\25\0\1\106\15\0"+
    "\1\143\23\0\16\143\1\0\3\143\1\0\1\143\10\0"+
    "\1\107\1\144\7\0\1\73\1\74\1\0\1\145\4\0"+
    "\3\144\16\107\1\145\3\107\1\0\1\107\26\0\1\110"+
    "\1\0\1\111\36\0\4\146\2\0\52\146\26\0\1\147"+
    "\15\0\1\150\54\0\1\151\57\0\1\152\53\0\1\153"+
    "\55\0\1\154\61\0\1\155\50\0\1\156\56\0\1\157"+
    "\65\0\1\160\25\0\2\73\7\0\1\73\1\74\1\0"+
    "\1\73\4\0\14\73\1\161\10\73\1\0\1\73\7\0"+
    "\16\162\1\0\41\162\52\0\1\163\5\0\4\70\2\0"+
    "\10\70\2\0\36\70\1\164\1\70\4\136\2\0\1\137"+
    "\1\165\54\136\2\0\52\136\4\166\2\0\1\167\1\170"+
    "\50\166\4\171\2\0\52\171\10\0\1\142\50\0\1\143"+
    "\1\172\12\0\1\173\4\0\3\172\16\143\1\173\3\143"+
    "\1\0\1\143\10\0\1\73\1\144\7\0\1\73\1\74"+
    "\1\0\1\145\4\0\3\144\16\73\1\145\3\73\1\0"+
    "\1\73\10\0\1\174\1\73\7\0\1\73\1\74\1\0"+
    "\1\73\4\0\3\73\16\174\1\73\3\174\1\0\1\174"+
    "\36\0\1\175\100\0\1\176\45\0\1\160\47\0\1\177"+
    "\73\0\1\200\55\0\1\201\55\0\1\202\50\0\1\203"+
    "\75\0\1\204\45\0\1\205\25\0\2\73\7\0\1\73"+
    "\1\74\1\0\1\73\4\0\12\73\1\206\12\73\1\0"+
    "\1\73\16\0\1\207\50\0\4\166\2\0\1\167\1\210"+
    "\54\166\2\0\52\166\7\0\1\211\56\0\1\141\1\0"+
    "\1\212\51\0\1\172\12\0\1\173\4\0\3\172\16\0"+
    "\1\173\15\0\1\213\23\0\16\213\1\0\3\213\1\0"+
    "\1\213\10\0\1\174\1\214\7\0\1\73\1\74\1\0"+
    "\1\145\4\0\3\214\16\174\1\145\3\174\1\0\1\174"+
    "\37\0\1\215\37\0\1\216\105\0\1\217\57\0\1\220"+
    "\46\0\1\221\71\0\1\205\57\0\1\222\56\0\1\223"+
    "\22\0\2\73\7\0\1\73\1\224\1\0\1\73\4\0"+
    "\25\73\1\0\1\73\16\0\1\225\60\0\1\226\50\0"+
    "\1\213\1\227\12\0\1\173\4\0\3\227\16\213\1\173"+
    "\3\213\1\0\1\213\10\0\1\73\1\214\7\0\1\73"+
    "\1\74\1\0\1\145\4\0\3\214\16\73\1\145\3\73"+
    "\1\0\1\73\40\0\1\230\56\0\1\231\15\0\1\231"+
    "\44\0\1\232\70\0\1\233\41\0\1\234\72\0\1\235"+
    "\47\0\1\236\34\0\1\73\42\0\1\237\10\0\1\227"+
    "\12\0\1\173\4\0\3\227\16\0\1\173\46\0\1\160"+
    "\53\0\1\240\72\0\1\241\51\0\1\242\72\0\1\205"+
    "\57\0\1\160\62\0\1\243\44\0\1\244\53\0\1\245"+
    "\25\0\4\246\2\0\10\246\2\0\40\246\42\0\1\247"+
    "\42\0\1\250\50\0\1\251\101\0\1\252\27\0\1\253"+
    "\74\0\1\254\75\0\1\255\47\0\1\256\56\0\1\255"+
    "\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6624];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\24\1\2\11\1\1\2\11\2\1\2\11\4\1"+
    "\1\11\2\1\1\11\3\1\1\11\1\1\1\11\2\1"+
    "\1\0\1\1\1\0\3\1\1\0\3\1\1\11\2\0"+
    "\1\1\1\0\1\11\1\0\3\11\2\0\1\1\6\0"+
    "\1\1\2\0\2\11\1\1\1\11\5\1\1\0\3\1"+
    "\12\0\2\1\1\11\1\1\1\0\4\1\2\0\1\1"+
    "\1\0\1\1\6\0\1\11\1\1\1\11\3\0\2\1"+
    "\10\0\2\11\1\1\1\0\1\11\10\0\1\11\3\0"+
    "\2\1\5\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public GeneratedFitnesseLexer() {
      this((java.io.Reader)null);
    }

    public GeneratedFitnesseLexer(boolean highlightMode) {
      this((java.io.Reader)null);
      isHighlightModeOn = highlightMode;
    }

    boolean isHighlightModeOn = false;


  GeneratedFitnesseLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  GeneratedFitnesseLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { yybegin(CURRLY_DEFINE);return FitnesseTokenTypes.DEFINE_BLOCK;
          }
        case 46: break;
        case 37: 
          { return FitnesseTokenTypes.BOLD;
          }
        case 47: break;
        case 12: 
          { return FitnesseTokenTypes.TABLE_TEXT;
          }
        case 48: break;
        case 15: 
          { return FitnesseTokenTypes.TABLE_QUESTION;
          }
        case 49: break;
        case 38: 
          { return FitnesseTokenTypes.COLAPSABLE_START;
          }
        case 50: break;
        case 45: 
          { return FitnesseTokenTypes.KEYWORD;
          }
        case 51: break;
        case 13: 
          { yybegin(TABLE); yypushback(yylength()); return FitnesseTokenTypes.TABLE_RECORD_DELIM;
          }
        case 52: break;
        case 32: 
          { return FitnesseTokenTypes.HEADER3;
          }
        case 53: break;
        case 28: 
          { return FitnesseTokenTypes.MARKUP;
          }
        case 54: break;
        case 33: 
          { return FitnesseTokenTypes.CENTER;
          }
        case 55: break;
        case 7: 
          { return FitnesseTokenTypes.COMMENT_TEXT;
          }
        case 56: break;
        case 17: 
          { return FitnesseTokenTypes.KEYWORD_PARAM;
          }
        case 57: break;
        case 39: 
          { yybegin(PREFORMATTED); return FitnesseTokenTypes.PREFORMATTED_START;
          }
        case 58: break;
        case 18: 
          { yybegin(YYINITIAL); yypushback(yylength()); return FitnesseTokenTypes.KEYWORD_END;
          }
        case 59: break;
        case 24: 
          { yybegin(YYINITIAL); return FitnesseTokenTypes.DEFINE_BLOCK;
          }
        case 60: break;
        case 3: 
          { return FitnesseTokenTypes.DIGIT;
          }
        case 61: break;
        case 40: 
          { yybegin(YYINITIAL);return FitnesseTokenTypes.PREFORMATTED_END;
          }
        case 62: break;
        case 22: 
          { return FitnesseTokenTypes.DEFINE_VALUE;
          }
        case 63: break;
        case 23: 
          { yybegin(YYINITIAL);return FitnesseTokenTypes.DEFINE_BLOCK;
          }
        case 64: break;
        case 31: 
          { return FitnesseTokenTypes.HEADER2;
          }
        case 65: break;
        case 4: 
          { return FitnesseTokenTypes.OTHER;
          }
        case 66: break;
        case 1: 
          { return FitnesseTokenTypes.UNLEXED_CONTENT;
          }
        case 67: break;
        case 29: 
          { return FitnesseTokenTypes.COLAPSABLE_END;
          }
        case 68: break;
        case 16: 
          { return FitnesseTokenTypes.TABLE_EQUAL;
          }
        case 69: break;
        case 25: 
          { return FitnesseTokenTypes.PREFORMATTED_CONTENT;
          }
        case 70: break;
        case 9: 
          { yybegin(YYINITIAL); yypushback(1); return FitnesseTokenTypes.TABLE_END_OF_TABLE;
          }
        case 71: break;
        case 11: 
          { yybegin(TABLE_RECORD); return FitnesseTokenTypes.TABLE_FIELD_DELIM;
          }
        case 72: break;
        case 43: 
          { yybegin(KEYWORD); return FitnesseTokenTypes.KEYWORD;
          }
        case 73: break;
        case 5: 
          { yybegin(COMMENT); return FitnesseTokenTypes.COMMENT;
          }
        case 74: break;
        case 14: 
          { return FitnesseTokenTypes.TABLE_FIELD_DELIM;
          }
        case 75: break;
        case 42: 
          { yybegin(MARKUP); return FitnesseTokenTypes.MARKUP;
          }
        case 76: break;
        case 35: 
          { yybegin(PAREN_DEFINE);return FitnesseTokenTypes.DEFINE_BLOCK;
          }
        case 77: break;
        case 30: 
          { return FitnesseTokenTypes.HEADER1;
          }
        case 78: break;
        case 2: 
          { return FitnesseTokenTypes.IDENT;
          }
        case 79: break;
        case 20: 
          { return FitnesseTokenTypes.UNEXPECTED_CONTENT;
          }
        case 80: break;
        case 41: 
          { return FitnesseTokenTypes.WIKIWORD;
          }
        case 81: break;
        case 36: 
          { return FitnesseTokenTypes.LIST;
          }
        case 82: break;
        case 6: 
          { yybegin(TABLE_RECORD); yypushback(1); return FitnesseTokenTypes.TABLE_START;
          }
        case 83: break;
        case 44: 
          { yybegin(DEFINE); return FitnesseTokenTypes.KEYWORD;
          }
        case 84: break;
        case 19: 
          { yybegin(YYINITIAL); return FitnesseTokenTypes.MARKUP_PARAM;
          }
        case 85: break;
        case 27: 
          { return FitnesseTokenTypes.STRIKEOUT;
          }
        case 86: break;
        case 26: 
          { return FitnesseTokenTypes.ITALICS;
          }
        case 87: break;
        case 8: 
          { yybegin(YYINITIAL); yypushback(yylength()); return FitnesseTokenTypes.COMMENT_END;
          }
        case 88: break;
        case 10: 
          { return FitnesseTokenTypes.NEWLINE;
          }
        case 89: break;
        case 21: 
          { return FitnesseTokenTypes.DEFINE_KEY;
          }
        case 90: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

    @Override
    public void reset(CharSequence charSequence, int i, int i2, int i3) {

    }


}
